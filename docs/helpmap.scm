(("Audio" ("This part of fluxus is responsible for capturing the incoming sound, and processing it into harmonic data, using fft (Fast Fourier Transform). The harmonics are bands of frequency which the sound is split into, giving some indication of the quality of the sound. It's the same as you see on a graphic equaliser - in fact, one of the example scripts (bars.scm) acts as a graphic equaliser display, and should be used to test the audio is working." " (start-audio \"alsa_pcm:capture_1\" 1024 44100)\n (define (animate)\n\t\t(colour (vector (gh 1) (gh 2) (gh 3))) ; make a colour from the harmonics, and set it to be the current colour \n\t\t(draw-cube)) ; draw a cube with this colour\n (every-frame (animate))\n" (("start-audio" ("jackport-string buffersize-number samplerate-number" "void" "Starts up the audio with the specified settings, you'll need to call this first, or put it into $HOME/.fluxus.scm to call it automatically at startup. Make the jack port name an empty string and it won't try to connect to anything for you. You can use qjackctrl or equivelent to do the connection manually. Fluxus reads a single mono source." " (start-audio \"alsa_pcm:capture_1\" 1024 44100)\n")) ("gh" ("harmonic-number" "harmonic-real" "Fluxus converts incoming audio into harmonic frequencies, which can then be plugged into your animations using this command. There are 16 harmonic bands availible, the harmonic-value argument will be wrapped around if greater or less than 16, so you can use this command without worrying about out of range errors." " (define (animate)\n\t\t(colour (vector (gh 1) (gh 2) (gh 3))) ; make a colour from the harmonics, and set it to be the current colour \n\t\t(draw-cube)) ; draw a cube with this colour\n (every-frame (animate))\n")) ("gain" ("gain-number" "void" "Sets the gain level for the fft sound, it's 1 by default." " (gain 100) ; too quiet?!\n")) ("process" ("wavfile-string" "void" "This command temporarally disables the realtime reading of the input audio stream and reads a wav file instead. For use with the framedump command to process audio offline to make music videos. The advantage of this is that it locks the framerate so the right amount of audio gets read for each frame - making syncing of the frames and audio files possible." " (process \"somemusic.wav\") ; read a precorded audio file\n")) ("smoothing-bias" ("value-number" "void" "A kind of weighted average for the harmonic bands which smooth them out over time. This setting defaults to 1.5. The best value really depends on the quality of the music, and the buffer sizes, and ranges from 0 -> 2. It's more obvious if you give it a try with the bars.scm script" " (smoothing-bias 0) ; no smoothing\n")) ("update-audio" ("" "void" "Updates the audio subsytem. This function is called for you (per frame) in fluxus-canvas.ss." " (smoothing-bias 0) ; no smoothing\n"))))) ("Renderer" ("These commands are the low level renderer controls. You shouldn't need to deal with these unless you are implementing a fluxus renderer outside of the scratchpad interface." "" (("make-renderer" ("" "rendererid-number" "Makes a new scenegraph renderer." " (make-renderer) \n")) ("renderer-grab" ("rendererid-number" "void" "Make this renderer the current context for commands." " (renderer-grab renderer) \n")) ("renderer-ungrab" ("" "void" "Pop the renderer context stack." " (renderer-grab renderer) \n")) ("render" ("" "void" "Clears the backbuffer, and renders everything" " (render) \n")) ("tick-physics" ("" "void" "Update the physics system." " (tick-physics) \n")) ("render-physics" ("" "void" "Render the physics system (for helper graphics)." " (render-physics) \n")) ("reset-renderers" ("" "void" "Deletes all the renderers and makes a new default one." " (reset-renderers) \n")) ("reshape" ("width-number height-number" "void" "Calls reshape on the current renderer" " (reshape 100 100) \n")) ("fluxus-init" ("" "void" "Inits the whole rendering system, only needs calling once." " (fluxus-init) \n"))))) ("GlobalState" ("Global state is really anything that controls the renderer globally, so it affects all primitives or controls the renderer directly - ie camera control or full screen effects like blurring." "" (("clear-engine" ("" "void" "Clears the renderer, and physics system. This command should not be called directly, use clear instead, as this clears a few other things, and calls clear-engine itself." " (clear-engine) ; woo hoo!\n")) ("blur" ("amount-number" "void" "Sets the full screen blur setting. Less is more, but if you set it too low it will make the on screen editing impossible to read, so save your script first :)" " (blur 0.1) ; for nice trails\n")) ("fog" ("fogcolour-vector amount-number begin-number end-number" "void" "Sets the fogging parameters to give a visual depth cue (aerial perspective in painter's jargon). This can obscure the on screen editing, so keep the amount small." " (clear-colour (vector 0 0 1))   ; looks nice if the background matches\n (fog (vector 0 0 1) 0.01 1 100) ; blue fog\n")) ("show-axis" ("show-number" "void" "Shows the worldspace origin axis. used." " (show-axis 1)\n")) ("show-fps" ("show-number" "void" "Shows an fps count in the lower left of the screen. used." " (show-fps 1)\n")) ("lock-camera" ("primitiveid-number" "void" "Locks the camera transform onto the specified primitive's transform. It's like parenting the camera to the object. This is the easiest way to procedurally drive the camera. Use an id number of 0 to unlock the camera." " (clear)\n (define obj (build-cube)) ; make a cube for the camera to lock to\n \n (push) ; make a background cube so we can tell what's happening\n (hint-wire)  \n (hint-unlit) \n (colour (vector 0 0.4 0))\n (scale (vector -50 -50 -50))\n (build-cube)\n (pop)\n \n (lock-camera obj) ; lock the camera to our first cube\n \n (define (animate)\n     (grab obj)\n     (rotate (vector 1 0 0)) ; rotate the cube\n     (ungrab))\n \n (every-frame (animate))\n")) ("camera-lag" ("amount-number" "void" "The camera locking has an inbuilt lagging which means it will smoothly blend the movement relative to the primitive it's locked to." " (clear)\n (define obj (build-cube)) ; make a cube for the camera to lock to\n \n (push) ; make a background cube so we can tell what's happening\n (hint-wire)\n (hint-unlit)\n (colour (vector 0 0.4 0))\n (scale (vector -50 -50 -50))\n (build-cube)\n (pop)\n \n (lock-camera obj) ; lock the camera to our first cube\n (camera-lag 0.1)  ; set the lag amount, this will smooth out the cube jittery movement\n \n (define (animate)\n     (grab obj)\n     (identity)\n     (translate (vector (modulo (round (inexact->exact (time))) 6) 0 0)) ; make a jittery movement\n     (ungrab))\n \n (every-frame (animate))\n")) ("load-texture" ("pngfilename-string" "textureid-number" "Loads a texture from disk, converts it to a texture, and returns the id number. The texture loading is memory cached, so repeatedly calling this will not cause it to load again. Use force-load-texture if you are changing the texture while running the script. The png may be RGB or RGBA to use alpha transparency." " (texture (load-texture \"mytexture.png\"))\n (build-cube) ; the cube will be texture mapped with the image\n")) ("force-load-texture" ("pngfilename-string" "textureid-number" "Uncached loading of textures from disk, converts it to a texture, and returns the id number. Useful if you are changing the texture while running the script, otherwise use load-texture, which will be much faster. The png may be RGB or RGBA to use alpha transparency." " (texture (force-load-texture \"mytexture.png\"))\n (build-cube) ; the cube will be texture mapped with the image\n")) ("frustum" ("top-number bottom-number left-number right-number" "void" "Sets the camera frustum, and thus the aspect ratio of the frame." " (frustum -1 1 -0.75 0.75) ; default settings\n")) ("clip" ("front-number back-number" "void" "Sets the front & back clipping planes for the camera frustum, and thus the viewing angle. Change the front clipping distance to alter the perspective from telephoto to fisheye." " (clip 1 10000) ; default settings\n")) ("ortho" ("" "void" "Sets orthographic projection - i.e. no perspective." " (ortho) \n")) ("persp" ("" "void" "Sets perspective projection (the default) after ortho has been set." " (persp) \n")) ("set-ortho-zoom" ("amount-number" "void" "Sets the zoom level for the orthographic projection." " (set-ortho-zoom 2) \n")) ("backfacecull" ("setting-number" "void" "Turns backface culling on or off. Backface culling speeds up rendering by removing faces not orientated towards the camera. Defaults to on, but this is not always desired, eg for double sided polygons." " (backfacecull 0) \n")) ("clear-colour" ("colour-vector" "void" "Sets the colour we clear the renderer with, this forms the background colour for the scene." " (clear-colour (vector 1 0 0)) ; RED!!!\n")) ("clear-frame" ("setting-number" "void" "Sets the frame clearing on or off." " (clear-frame 0) \n")) ("clear-zbuffer" ("setting-number" "void" "Sets the zbuffer clearing on or off." " (clear-zbuffer 0) \n")) ("get-camera" ("" "matrix-vector" "Gets the current camera transform matrix. This is the low level function, use get-camera-transform instead." " (get-camera) \n")) ("get-locked-matrix" ("" "matrix-vector" "Gets the current camera lock transform matrix. Takes the lag into account" " (get-locked-matrix) \n")) ("set-camera" ("" "void" "Sets the camera transform matrix. This is the low level interface used by set-camera-transform, which you should generally use instead." " (set-camera) \n")) ("get-projection-transfrom" ("" "projection-matrix" "Gets the current projection matrix." " (get-projection-transfrom) \n")) ("get-screen-size" ("" "size-vector" "Returns a vector containing the current width and height of the window." " (get-screen-size) \n")) ("set-screen-size" ("size-vector" "void" "Sets the window width and height." " (set-screen-size (vector 10 10)) ; small window time :) \n")) ("select" ("screenxpos-number screenypos-number pixelssize-number" "primitiveid-number" "Looks in the region specified and returns the id of the closest primitive to the camera rendered there, or 0 if none exist." " (display (select 10 10 2))(newline)\n")) ("desiredfps" ("fps-number" "void" "Throttles the renderer so as to not take 100% cpu. This gives an upper limit on the fps rate, which doesn't quite match the given number, but I'm working on it..." " (desiredfps 100000) ; makes fluxus render as fast as it can, and take 100% cpu.\n")) ("draw-buffer" ("buffer_name" "void" "Select which buffer to draw in for stereo mode you'd do 'back-right and 'back-left" " (draw-buffer 'back)\n")) ("set-stereo-mode" ("mode" "bool" "select which stereo mode to use currently only 'crystal-eyes and 'no-stereo are supported the return indicates if the operation was successful or not 'crystal-eyes will return false if you don't have a stereo window" " (set-stereo-mode 'crystal-eyes)\n")) ("(set-colour-mask" ("vec)" "void" "sets the colour mask give it a quat of booleans which correspond to the red, green, blue and alpha channels respectively after this operation you'll only see those colour which you set to true (this is useful for stereo with red-blue glasses)" " (set-colour-mask #(#t #f #f #t))\n"))))) ("Lights" ("Without lights you wouldn't be able to see anything. Luckily fluxus gives you one for free by default, a white diffuse point light attached to the camera. For more interesting lighting, you'll need these functions. Using the standard fixed function graphics pipeline, simplistically speaking, OpenGL multiplies these values with the surface material (set with local state commands like ambient and diffuse) and the texture colour value to give the final colour." "" (("make-light" ("type-string cameralocked-string" "lightid-number" "Makes a new light. The type can be one of: \"point\", \"directional\" or \"spot\". If the cameralocked string is not \"free\" then it will be attached to the camera, and move around when you move the camera." " (make-light \"spot\" \"locked\")\n")) ("light-ambient" ("lightid-number colour" "void" "Sets the ambient contribution for the specified light." " (light-ambient mylight (vector 1 1 1)) ; a boring light\n")) ("light-diffuse" ("lightid-number colour" "void" "Sets the diffuse contribution for the specified light." " (light-diffuse mylight (vector 1 1 1)) \n")) ("light-specular" ("lightid-number colour" "void" "Sets the specular contribution for the specified light." " (light-specular mylight (vector 1 1 1)) \n")) ("light-position" ("lightid-number position-vector" "void" "Sets the position of the specified light. In worldspace if free, in camera space is attached." " (light-position mylight (vector 0 100 0)) \n")) ("light-spot-angle" ("lightid-number angle-number" "void" "Sets the spotlight cone angle of the specified light. If it's not a spot light, this command has no effect." " (light-position mylight (vector 0 100 0)) \n")) ("light-spot-exponent" ("lightid-number exponent-number" "void" "Sets the spotlight exponent (fuzzyness of the cone) of the specified light. If it's not a spot light, this command has no effect." " (light-spot-exponent mylight 0.1) \n")) ("light-attenuation" ("lightid-number type-string attenuation-number" "void" "Sets the light attenuation (fade off with distance) of the specified light. The type string can be one of: \"constant\", \"linear\" or \"quadratic\"." " (light-spot-exponent mylight 0.1) \n")) ("light-direction" ("lightid-number direction-vector" "void" "Sets the direction of a directional light. If it's not a directional light, this command has no effect." " (light-spot-exponent mylight 0.1) \n"))))) ("LocalState" ("The local state functions control rendering either for the current state - or the state of the currently grabbed primitive. In fluxus state means the way that things are displayed, either turning on and off rendering features, changing the style of different features, or altering the current transform." "" (("push" ("" "void" "Pushes a copy of the current drawing state to the top of the stack. The drawing state contains information about things like the current colour, transformation and hints." " (colour (vector 1 0 0)) ; set current colour to red\n (push)                  ; copy and push drawing state\n (colour (vector 0 1 0)) ; set current colour to green\n (draw-cube)             ; draws a green cube\n (pop)\t\t\t\t   ; forget old drawing state\n ; current colour is now red again\n")) ("pop" ("" "void" "Destroys the current drawing state, and sets the current one to be the previously pushed one in the stack. The drawing state contains information about things like the current colour, transformation and hints." " (colour (vector 1 0 0)) ; set current colour to red\n (push)                  ; copy and push drawing state\n (colour (vector 0 1 0)) ; set current colour to green\n (draw-cube)             ; draws a green cube\n (pop)\t\t\t\t   ; forget old drawing state\n ; current colour is now red again\n")) ("grab" ("object-id" "void" "Grabs the specified object. Once an object has grabbed it's state can be modified using the same commands used to set the current drawing state. (ungrab) needs to be used to return to the normal drawing state. Grabbing can also be stacked, in which case ungrab pops to the last grabbed primitive." " (colour (vector 1 0 0))      ; set the current colour to red\n (define mycube (build-cube)) ; makes a red cube \n (grab mycube)  \t\t\t\t       \n (colour (vector 0 1 0)) ; sets the cubes colour to green \n (ungrab)\t\t\t\t   ; return to normal state\n")) ("ungrab" ("" "void" "Ungrabs the currently grabbed object, and either returns to the normal drawing state, or pops to the last grabbed primitive." " (colour (vector 1 0 0))      ; set the current colour to red\n (define mycube (build-cube)) ; makes a red cube \n (grab mycube)  \t\t\t\t       \n (colour (vector 0 1 0)) ; sets the cubes colour to green \n (ungrab)\t\t\t\t   ; return to normal state\n")) ("apply" ("object-id" "void" "Applies the current object transform to the vertex positions of the supplied object and sets it's transform to identity." " (rotate (vector 45 0 0))     \n (define mycube (build-cube)) ; makes a cube with a rotation \n (apply mycube)  \t\t\t\t; applies the rotation to the points of the cube\n")) ("opacity" ("value" "void" "Sets the opacity of the current drawing state, or the currently grabbed primitive." " (opacity 0.5)     \n (define mycube (build-cube)) ; makes a half transparent cube \n")) ("shinyness" ("value" "void" "Sets the shinyness of the current drawing state, or the currently grabbed primitive. This value sets the tightness of the specular highlight." " (shinyness 100)     \n (specular (vector 1 1 1)) ; sets the specular colour\n (define mysphere (build-sphere 10 10)) ; makes a shiny cube \n")) ("colour" ("colour-vector" "void" "Sets the colour of the current drawing state, or the currently grabbed primitive." " (colour (vector 1 0.5 0.1)) ; mmm orange...   \n (define mycube (build-cube)) ; makes an orange cube \n")) ("wire-colour" ("colour-vector" "void" "Sets the wire frame colour of the current drawing state, or the currently grabbed primitive. Visible with (hint-wire) on most primitives." " (wire-colour (vector 1 1 0)) ; set yellow as current wire colour\n (hint-wire)   \n (define mycube (build-cube)) ; makes a cube with yellow wireframe \n")) ("specular" ("colour-vector" "void" "Sets the specular colour of the current drawing state, or the currently grabbed primitive." " (specular (vector 0 0 1)) ; set blue as specular colour\n (define mysphere (build-sphere 10 10)) ; makes a shiny blue sphere\n")) ("ambient" ("colour-vector" "void" "Sets the ambient colour of the current drawing state, or the currently grabbed primitive." " (ambient (vector 0 0 1)) ; set blue as ambient colour\n (define mysphere (build-sphere 10 10)) ; makes a boringly blue sphere \n")) ("opacity" ("value" "void" "Sets the emissive colour of the current drawing state, or the currently grabbed primitive." " (emissive (vector 0 0 1)) ; set blue as emissive colour\n (define mysphere (build-sphere 10 10)) ; makes an bright blue sphere \n")) ("identity" ("" "void" "Sets the drawing state transform to identity, on the state stack, or the currently grabbed primitive." " (push)\n (scale (vector 2 2 2)) ; set the current scale to double in each dimension\n (define mycube (build-cube)) ; make a scaled cube \n (pop)\n (grab mycube)\n (identity) ; erases the transform and puts the cube back to its original state\n (ungrab)\n")) ("concat" ("matrix" "void" "Concatenates (multiplies) a matrix on to the current drawing state or grabbed primitive." " (define mymatrix (mrotate (vector 0 45 0))) ; make a matrix\n (concat mymatrix) ; concat it into the current state\n (build-cube) ; make a cube with this rotation\n")) ("translate" ("vector" "void" "Applies a translation to the current drawing state transform or grabbed primitive." " (transform (vector 0 1.4 0)) ; translates the current transform up a bit\n (build-cube) ; build a cube with this transform\n")) ("rotate" ("vector-or-quaternion" "void" "Applies a rotation to the current drawing state transform or grabbed primitive." " (rotate (vector 0 45 0)) ; turns 45 degrees in the Y axis\n (build-cube) ; build a cube with this transform\n")) ("scale" ("vector" "void" "Applies a scale to the current drawing state transform or grabbed primitive." " (scale (vector 0.5 0.5 0.5)) ; scales the current transform to half the size\n (build-cube) ; build a cube with this transform\n")) ("get-transform" ("" "matrix-vector" "Returns: a matrix representing the current state transform or for the grabbed primitive." " (translate (vector 1 0 0))\n (display (get-transform))(newline) ; prints the current transform\n (define shape (build-sphere 10 10))\n (grab shape)\n (translate (vector 0 1 0))\n (display (get-transform))(newline) ; prints shape's transform\n (ungrab)\n")) ("parent" ("primitive-id" "void" "Parents the currently grabbed primitive to the supplied parent primitive. The current primitive will now be moved around with the parent by aquiring all the parent's transforms." " (define parent-prim (build-cube)) ; make a parent cube\n (translate (vector 2 0 0)) ; move a bit in x\n (parent parent-prim) ; set parent-prim as the current parent\n (define child-prim (build-cube)) ; make a child cube\n (grab parent-prim) \n (rotate (vector 0 45 0)) ; the child will now be moved by this transform in addition to its own\n (ungrab)\n")) ("line-width" ("value" "void" "Sets the line width (in screen space) of the current drawing state, or the currently grabbed primitive. Affects wireframe and things like that." " (line-width 5)\n (hint-wire)\n (build-sphere 10 10) ; make a sphere with thick wireframe\n")) ("point-width" ("value" "void" "Sets the point width (in screen space) of the current drawing state, or the currently grabbed primitive. Affects point rendering and particles in hardware point mode." " (point-width 5)\n (hint-points)\n (build-sphere 10 10) ; make a sphere with thick points\n")) ("blend-mode" ("src dst" "void" "Sets the blend mode of the current drawing state, or the currently grabbed primitive. This is the way that alpha is composited to the rendering surface." " (point-width 5)\n (hint-points)\n (build-sphere 10 10) ; make a sphere with thick points\n")) ("hint-solid" ("" "void" "Sets the render hints to solid of the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint." " (hint-solid) ; this is the default render style so this isn't too exciting\n (build-cube) ; make a solid rendered cube \n")) ("hint-wire" ("" "void" "Sets the render hints to wireframe of the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint." " (hint-wire)\n (build-cube) ; make a wirefame rendered cube \n")) ("hint-normal" ("" "void" "Sets the render hints to display normals in the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint." " (hint-normal)\n (build-cube) ; display the normals on this cube \n")) ("hint-points" ("" "void" "Sets the render hints to display points in the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint." " (hint-points)\n (build-cube) ; display the vertex points on this cube \n")) ("hint-anti-alias" ("" "void" "Sets the render hints to anti-alias in the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint." " (hint-anti-alias)\n (build-cube) ; display a smoothed cube \n")) ("hint-unlit" ("" "void" "Sets the render hints to unlit in the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint." " (hint-unlit)\n (build-cube) ; display an unlit cube\n")) ("hint-vertcols" ("" "void" "Sets the render hints to use vertex colours in the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint. Vertex colours override the current (colour) state." " (hint-vertcols)\n (define mycube (build-cube)) ; make a cube with vertcols enabled\n (grab mycube)\n (pdata-set \"c\" 0 (vector 0 1 0)) ; set the colour of the first vertex to green\n (ungrab)\n")) ("hint-box" ("" "void" "Sets the render hints to bounding box display in the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint." " (hint-box)\n (build-sphere 10 10) ; make a sphere with bounding box displayed\n")) ("hint-multitex" ("" "void" "Sets the render hints to use multitexturing in the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint." " (hint-multitexture)\n (multitexture 0 (load-texture \"tex1.png\"))\n (multitexture 1 (load-texture \"tex2.png\"))\n (build-sphere 10 10) ; make a sphere with overlayed textures\n")) ("hint-none" ("" "void" "Clears the render hints in the current drawing state, or the currently grabbed primitive. This allows you mainly to get rid of the default solid style, but also means that you can turn on and off hints without using push or pop." " (hint-none)\n (hint-wire)\n (build-cube) ; make a cube only visible with wireframe\n")) ("hint-origin" ("" "void" "Sets the render hints to display the object space origin of the primitive the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint." " (hint-origin)\n (build-sphere 10 10) ; make a sphere with the origin displayed\n")) ("hint-cast-shadow" ("" "void" "(note: Not yet implemented) Sets the render hints to cast shadows for the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint." " (hint-origin)\n (build-sphere 10 10) ; make a sphere with the origin displayed\n")) ("hint-depth-sort" ("" "void" "Sets the render hints to depth sort for the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint." " (hint-depth-sort)\n (build-sphere 10 10) \n")) ("hint-ignore-depth" ("" "void" "Sets the render hints to ignore depth tests for the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint. This feature is useful for rendering transparent objects, as it means objects will be shown behind previously rendered ones." " (hint-origin)\n (build-sphere 10 10) ; make a sphere with the origin displayed\n")) ("texture" ("textureid-number" "void" "Sets the texture of the current drawing state, or the currently grabbed primitive. Texture ids can be generated by the load-texture function." " (texture (load-texture \"mytexture.png\"))\n (build-sphere 10 10) ; make a sphere textured with mytexture.png\n")) ("multitexture" ("textureunit-number textureid-number" "void" "Sets the texture of the current drawing state, or the currently grabbed primitive in the same way as the texture function, but allows you to specify the texture unit (0-7) to apply the texture to. Multitexturing allows you to apply different textures and texture coordinates to the same object at once. Texture unit 0 is the default one (which uses the pdata \"t\" for it's texture coords) texture unit n looks for pdata \"tn\" - ie multitexture 1 looks for \"t1\". You need to add these yourself using (pdata-add) or (pdata-copy). Multitexturing is useful when the textures contain alpha, as they can be overlayed, i.e. decals placed on background textures. Note: fluxus needs to be built using scons MULTITEXTURE=1 to enable this feature." " (define obj (build-sphere 10 10)) ; make a sphere \n (grab obj)\n (multitexture 0 (load-texture \"mytextureA.png\")) \n (multitexture 1 (load-texture \"mytextureB.png\"))\n (pdata-add \"t1\" \"v\")   ; make some texture coords for texture B\n (pdata-copy \"t\" \"t1\")  ; copy them from the default texture coords\n (ungrab)\n")) ("print-scene-graph" ("" "void" "Prints out the current scene graph, useful for debugging." " (print-scene-graph) ; exciting...\n")) ("hide" ("hidden-number" "void" "Sets the hidden state for the grabbed primitive (also affects all child primitives). Hidden primitives can be treated as normal in every way - they just won't be rendered." " (define obj (build-cube))\n (grab obj)\n (hide 1) ; hide this cube\n (ungrab)\n")) ("selectable" ("selectable-number" "void" "Sets whether the grabbed primitive can be selected or not using the select command." " (define obj (build-cube))\n (grab obj)\n (selectable 0) ; now it won't be \"seen\" by calling select\n (ungrab)\n")) ("shader" ("vertexprogram-string fragmentprogram-string" "void" "Loads, compiles and sets the GLSL harware shader pair for the current drawing state, or the currently grabbed primitive. Requires OpenGL 2 support. The shader's uniform data can be controlled via shader-set! and all the pdata is sent through as per-vertex attribute data to the shader." " (push)\n ; assign the shaders to the surface\n (shader \"simplevert.glsl\" \"simplefrag.glsl\")\n (define s (build-sphere 20 20))\n (pop)\n \n (grab s)\n ; add and set the pdata - this is then picked up in the vertex shader \n ; as an input attribute called \"testcol\"\n (pdata-add \"testcol\" \"v\")\n (set-cols (pdata-size))\n (ungrab)\n \n (define (animate)\n     (grab s)\n \t; animate the deformamount uniform input parameter \n     (shader-set! (list \"deformamount\" (cos (time))))\n     (ungrab))\n \n (every-frame (animate))")) ("shader-set!" ("argument-list" "void" "Sets the uniform shader parameters for the GLSL shader. The list consists of token-string value pairs, which relate to the corresponding shader parameters names and values." " (push)\n ; assign the shaders to the surface\n (shader \"simplevert.glsl\" \"simplefrag.glsl\")\n (define s (build-sphere 20 20))\n (pop)\n \n (grab s)\n ; add and set the pdata - this is then picked up in the vertex shader \n ; as an input attribute called \"testcol\"\n (pdata-add \"testcol\" \"v\")\n (set-cols (pdata-size))\n (ungrab)\n \n (define (animate)\n     (grab s)\n \t; animate the deformamount uniform input parameter \n     (shader-set! (list \"deformamount\" (cos (time))))\n     (ungrab))\n \n (every-frame (animate))\n"))))) ("Maths" ("These functions are optimised for 3D graphics, and the collision of computer science and maths is apparent here, so vectors representing \"vectors\" are in this context taken to be 3 elements long, quaternions are vectors of length 4, and matrices are vectors of 16 elements long." "" (("vmul" ("vector number" "result-vector" "Multiplies a vector by a number" " (vmul (vector 1 2 3) 2)\n")) ("vadd" ("vector vector" "result-vector" "Adds two vectors together" " (vadd (vector 1 2 3) (vector 1 2 3))\n")) ("vsub" ("vector vector" "result-vector" "Subtracts a vector from another" " (vsub (vector 1 2 3) (vector 1 2 3))\n")) ("vdiv" ("vector number" "result-vector" "Divides a vector by a number" " (vdiv (vector 1 2 3) 2)\n")) ("vtransform" ("vector matrix" "result-vector" "Multiplies (transforms) a vector by a matrix" " (vtransform (vector 0 1 0) (mrotate (vector 90 0 0)))\n")) ("vtransform-rot" ("vector matrix" "result-vector" "Multiplies (transforms) a vector by a matrix, but leaves out the translation part. For operations involving normals." " (vtransform-rot (vector 0 1 0) (mrotate (vector 90 0 0)))\n")) ("vnormalise" ("vector" "result-vector" "Returns the normalised form of the vector (length=1)" " (vtransform-rot (vector 0 1 0) (mrotate (vector 90 0 0)))\n")) ("vdot" ("vector vector" "result-number" "Returns the dot product of two vectors" " (vdot (vector 0 1 0) (vector 1 0 0))\n")) ("vmag" ("vector" "result-number" "Returns the magnitude, or length of the vector" " (vmag (vector 0 1 1))\n")) ("vdist" ("vector vector" "result-number" "Treating the vectors as points, returns the distance between them" " (vdist (vector 100 100 0) (vector 0 0 100))\n")) ("vcross" ("vector vector" "result-vector" "Returns the cross product of two vectors" " (vcross (vector 100 100 0) (vector 0 0 100))\n")) ("mmul" ("matrix-vector matrix-vector" "matrix-vector" "Multiplies two matrices together" " (vmul (mtranslate (vector 1 0 0)) (mrotate (vector 0 90 0)))\n")) ("madd" ("matrix-vector matrix-vector" "matrix-vector" "Adds two matrices together" " (vadd (mtranslate (vector 1 0 0)) (mrotate (vector 0 90 0)))\n")) ("msub" ("matrix-vector matrix-vector" "matrix-vector" "Subtracts a matrix from another" " (vsub (mtranslate (vector 1 0 0)) (mrotate (vector 0 90 0)))\n")) ("mdiv" ("matrix-vector matrix-vector" "matrix-vector" "Divides a matrix by another" " (vdiv (mtranslate (vector 1 0 0)) (mrotate (vector 0 90 0)))\n")) ("mident" ("" "matrix-vector" "Returns the identity matrix" " (mident)\n")) ("mtranslate" ("vector" "matrix-vector" "Returns a matrix representing the specified transform" " (mtransform (vector 100 0 0))\n")) ("mrotate" ("vector" "matrix-vector" "Returns a matrix representing the specified rotation. Accepts a vector of euler angles, or a quaternion." " (mrotate (vector 0 45 0))\n")) ("mscale" ("vector" "matrix-vector" "Returns a matrix representing the specified scaling." " (mscale (vector 0.5 2 0.5))\n")) ("mtranspose" ("matrix-vector" "matrix-vector" "Returns the transpose of the input vector" " (mtranspose (mident))\n")) ("minverse" ("matrix-vector" "matrix-vector" "Returns the inverse of the input vector" " (minverse (mscale (vector 0.5 2 0.5)))\n")) ("maim" ("aim-vector up-vector" "matrix-vector" "Returns a matrix representing an aiming rotation so that the x axis points down the aim direction, and the y axis points up the up vector. Probably suffers from gimbal lock." " (maim (vector 0 0 1) (vector 0 1 0))\n")) ("qaxisangle" ("axis-vector angle-number" "quaternion-vector" "Returns the quaternion representing rotation of angle degrees about the specified axis." " (qaxisangle (vector 0 1 0) 45)\n")) ("qmul" ("quaternion-vector quaternion-vector" "quaternion-vector" "Multiplies two quaternions together." " (qmul (qaxisangle (vector 0 1 0) 45) (qaxisangle (vector 0 0 1) 180))\n")) ("qnormalise" ("quaternion-vector" "quaternion-vector" "Normalises a quaternion." " (qnormalise (qaxisangle (vector 0 19 0) 45))\n")) ("qtomatrix" ("quaternion-vector" "matrix-vector" "Converts a quaternion into a rotation matrix." " (qtomatrix (qaxisangle (vector 0 1 0) 45))\n")) ("qconjugate" ("quaternion-vector" "quaternion-vector" "Conjugatea a quaternion." " (qconjugate (qaxisangle (vector 0 1 0) 45))\n"))))) ("PrimitiveData" ("Primitive data (pdata for short) is fluxus' name for data which comprises primitives. In polygon primitives this means the vertex information, in particle primitives it corresponds to the particle information, in NURBS primitives it's the control vertices. Access to pdata gives you the ability to use primitives which are otherwise not very interesting, and deform and shape other primitives to give much more detailed models and animations. You can also add your own pdata, which is treated exactly like the built in types. Primitive data is named by type strings, the names of which depend on the sort of primitive. All pdata commands operate on the currently grabbed primitive." " ; a function to deform the points of an object\n (define (deform n)\n     (pdata-set \"p\" n (vadd  (pdata-get \"p\" n)                ; the original point, plus\n         (vmul (vector (flxrnd) (flxrnd) (flxrnd)) 0.1)))     ; a small random vector\n     (if (zero? n)\n         0\n         (deform (- n 1))))\n     \n (hint-unlit) ; set some render settings to\n (hint-wire)  ; make things easier to see\n (line-width 4)\n (define myobj (build-sphere 10 10)) ; make a sphere\n (grab myobj)\n (deform (pdata-size)) ; deform it\n (ungrab)\n" (("pdata-get" ("type-string index-number" "value-vector/colour/matrix/number" "Returns the corresponding pdata element." " (pdata-get \"p\" 1)\n")) ("pdata-set" ("type-string index-number value-vector/colour/matrix/number" "void" "Writes to the corresponding pdata element." " (pdata-get \"p\" 1)\n")) ("pdata-add" ("type-string name-string" "void" "Adds a new user pdata array. Type is one of \"v\":vector, \"c\":colour, \"f\":float or \"m\":matrix." " (pdata-add \"v\" \"mydata\")\n (pdata-set \"mydata\" 0 (vector 1 2 3))\n")) ("pdata-op" ("funcname-string pdataname-string operator" "void" "This is an experimental feature allowing you to do operations on pdata very quickly, for instance adding element for element one array of pdata to another. You can implement this in Scheme as a loop over each element, but this is slow as the interpreter is doing all the work. It's much faster if you can use a pdata-op as the same operation will only be one Scheme call." " (pdata-op \"+\" \"mydata\" (vector 1 2 3))  add a vector to all the pdata vectors\n (pdata-op \"+\" \"mydata\" \"myotherdata\")  add two pdata vectors element for element\n (pdata-op \"*\" \"mydata\" (vector 1 2 3))  multiply a vector to all the pdata vectors\n (pdata-op \"*\" \"mydata\" \"myotherdata\")  multiply two pdata vectors element for element\n (pdata-op \"closest\" \"p\" (vector 100 0 0))  returns position of the closest vertex to this point\n (pdata-op \"sin\" \"mydata\" \"myotherdata\")  sine of one float pdata to another\n (pdata-op \"cos\" \"mydata\" \"myotherdata\")  cosine of one float pdata to another\n")) ("pdata-copy" ("pdatafrom-string pdatato-string" "void" "Copies the contents of one pdata array to another. Arrays must match types." " (pdata-copy \"p\" \"mydata\")  copy the vertex positions to a user array\n")) ("pdata-size" ("" "count-number" "Returns the size of the pdata arrays (they must all be the same). This is mainly used for iterating over the arrays." " (define (mashup n)\n     (pdata-set \"p\" n (vector (flxrnd) (flxrnd) (flxrnd))) ; randomise the vertex position\n     (if (zero? n)\n         0\n         (mashup (- n 1)))) ; loops till n is 0\n\n (define shape (build-sphere 10 10))\n (grab shape)\n (mashup (pdata-size)) ; randomise verts on currently grabbed primitive\n (ungrab)\n")) ("finalise" ("" "void" "Doesn't do anything anymore, I need to remove this :)" "")) ("recalc-normals" ("smoothornot-number" "void" "For polygon primitives only. Looks at the vertex positions and calculates the lighting normals for you automatically. Call with \"1\" for smooth normals, \"0\" for faceted normals." " (define shape (build-sphere 10 10)) ; build a sphere (which is smooth by default)\n (grab shape)\n (recalc-normals 0) ; make the sphere faceted\n (ungrab)\n"))))) ("Physics" ("The physics system used in fluxus is based on the ode library, which allows you to add physical properties to objects and set them in motion. Since ODE is designed for rigid-body simulations, structures are described in terms of objects, joints and forces. A much more comprehensive explanation of these concepts can be found in the ODE documentation, which you have probably downloaded if you have compiled fluxus, or can be found at @url{http://ode.org/ode-docs.html} To help with debugging joints, try calling (render-physics) every frame, which will render locators showing you positions and axes of joints that have positional information." "" (("collisions" ("on/off-number" "void" "Enables or disables collision detection. Defaults to off." " (collisions 1)\n")) ("ground-plane" ("plane-vector offset-number" "void" "Create an infinite passive plane for use as the 'ground'" " (ground-plane (vector 0 1 0) 0)\n")) ("active-box" ("primitiveid-number" "void" "Enable the object to be acted upon by the physics system, using a box as the bounding volume. As an active object, it will be transformed by ode. Note: rotations only work correctly if you specify your transforms scale first, then rotate (translate doesn't matter) basically, ode can't deal with shearing transforms." " (define mycube (build-cube))\n (active-box mycube)\n")) ("active-cylinder" ("primitiveid-number" "void" "Enable the object to be acted upon by the physics system, using a cylinder as the bounding volume. As an active object, it will be transformed by ode. Note: rotations only work correctly if you specify your transforms scale first, then rotate (translate doesn't matter) basically, ode can't deal with shearing transforms." " (define mycube (build-cube))\n (active-cylinder mycube)\n")) ("active-sphere" ("primitiveid-number" "void" "Enable the object to be acted upon by the physics system, using a sphere as the bounding volume. As an active object, it will be transformed by ode. Note: rotations only work correctly if you specify your transforms scale first, then rotate (translate doesn't matter) basically, ode can't deal with shearing transforms." " (define mycube (build-cube))\n (active-sphere mycube)\n")) ("passive-box" ("primitiveid-number" "void" "Enable the object to be acted upon by the physics system, using a sphere as the bounding volume. As a passive object, active objects will collide with it, but it will not be transformed. Note: rotations only work correctly if you specify your transforms scale first, then rotate (translate doesn't matter) basically, ode can't deal with shearing transforms." " (define mycube (build-cube))\n (passive-box mycube)\n")) ("passive-cylinder" ("primitiveid-number" "void" "Enable the object to be acted upon by the physics system, using a cylinder as the bounding volume. As a passive object, active objects will collide with it, but it will not be transformed. Note: rotations only work correctly if you specify your transforms scale first, then rotate (translate doesn't matter) basically, ode can't deal with shearing transforms." " (define mycube (build-cube))\n (passive-cylinder mycube)\n")) ("passive-sphere" ("primitiveid-number" "void" "Enable the object to be acted upon by the physics system, using a sphere as the bounding volume. As a passive object, active objects will collide with it, but it will not be transformed. Note: rotations only work correctly if you specify your transforms scale first, then rotate (translate doesn't matter) basically, ode can't deal with shearing transforms." " (define mycube (build-cube))\n (passive-sphere mycube)\n")) ("surface-params" ("slip1-number slip2-number softerp-number softcfm-number" "void" "Sets some global surface attributes that affect friction and bouncyness. see section 7.3.7 of the ODE docs for an explanation of these parameters" " (surface-params 0.1 0.1 0.1 0.1)\n")) ("build-balljoint" ("primitiveid-number primitiveid-number axis-vector" "void" "Creates a balljoint to connect two objects (see the ode docs for a detailed description of the differences between the joint types). ODE considers joints to be a constraint that is enforced between two objects. When creating a joint, it is important to have the two primitives being joined in the desired positions before creating the joint. Joints can be created, modified and indexed in a similar way to other primitives." " (build-balljoint shape1 shape2 (vector 0 1 0)) \n")) ("build-fixedjoint" ("primitiveid-number" "void" "Creates a joint to connect an object to the global environment. This locks the object in place." " (build-fixedjoint shape) \n")) ("build-hingejoint" ("primitiveid1-number primitiveid2-number anchor-vector axis-vector" "hingeid-number" "Creates a ball joint to connect two objects (see the ode docs for a detailed description of the differences between the joint types). ODE considers joints to be a constraint that is enforced between two objects. When creating a joint, it is important to have the two primitives being joined in the desired positions before creating the joint. Joints can be created, modified and indexed in a similar way to other primitives." " (build-hingejoint shape1 shape2 (vector 0 1 0) (vector 0 1 0)) \n")) ("build-sliderjoint" ("primitiveid1-number primitiveid2-number axis-vector" "hingeid-number" "Creates a slider joint to connect two objects (see the ode docs for a detailed description of the differences between the joint types). ODE considers joints to be a constraint that is enforced between two objects. When creating a joint, it is important to have the two primitives being joined in the desired positions before creating the joint. Joints can be created, modified and indexed in a similar way to other primitives." " (build-sliderjoint shape1 shape2 (vector 0 1 0)) \n")) ("build-hinge2joint" ("primitiveid1-number primitiveid2-number anchor-vector axis1-vector axis2-vector" "hingeid-number" "Creates a hinge2 joint to connect two objects (see the ode docs for a detailed description of the differences between the joint types). ODE considers joints to be a constraint that is enforced between two objects. When creating a joint, it is important to have the two primitives being joined in the desired positions before creating the joint. Joints can be created, modified and indexed in a similar way to other primitives." " (build-hinge2joint shape1 shape2 (vector 0 100 0) (vector 0 1 0) (vector 0 1 0))\n")) ("build-amotorjoint" ("primitiveid1-number primitiveid2-number axis-vector" "hingeid-number" "Creates a angular motor joint to connect two objects (see the ode docs for a detailed description of the differences between the joint types). ODE considers joints to be a constraint that is enforced between two objects. When creating a joint, it is important to have the two primitives being joined in the desired positions before creating the joint. Joints can be created, modified and indexed in a similar way to other primitives." " (build-amotorjoint shape1 shape2 (vector 0 1 0))\n")) ("joint-param" ("jointid-number param-string value-number" "hingeid-number" "Sets the joint parameter for a joint where param is one of the following: \"HiStop\", \"Vel\", \"FMax\", \"FudgeFactor\", \"Bounce\", \"CFM\", \"StopERP\", \"StopCFM\",\"SuspensionERP\", \"SuspensionCFM\", \"Vel2\", \"FMax2\". see section 7.5.1 of the ODE docs for an explanation of each of these parameters, and which joint types they apply to." " (joint-param joint \"Vel\" 0.1)\n")) ("joint-angle" ("jointid-number param-string value-number" "void" "Set a new angle for this joint, with a given velocity taken to get there" " (joint-angle joint \"Vel\" 0.1)\n")) ("set-max-physical" ("max-number" "void" "Sets the maximum number of objects the physics system can deal with. When the max level has been reached the oldest objects are automatically destroyed." " (set-max-physical 100)\n")) ("set-mass" ("primitiveid-number mass-number" "void" "Sets the mass of an active object" " (set-mass myshape 100)\n")) ("gravity" ("gravity-vector" "void" "Sets the strength and direction of gravity." " (gravity (vector 0 -1 0))\n")) ("kick" ("primitiveid-number kick-vector" "void" "Applies translation force to the object" " (kick myshape (vector 0 1 0))\n")) ("twist" ("primitiveid-number spin-vector" "void" "Applies rotational force to the object" " (kick myshape (vector 2 0 0))\n")) ("has-collided" ("primitiveid-number" "void" "Returns true if the grabbed object collided in the last frame" " (if (has-collided myshape) (display \"bang!\"))\n"))))) ("Primitives" ("Primitives are objects that you can render. There isn't really much else in a fluxus scene, except lights, a camera and lots of primitives." "" (("build-cube" ("" "primitiveid-number" "A simple cube, texture mapped placement per face @image{images/cube}" " (define mynewcube (build-cube))\n")) ("build-polygins" ("verts-number type-number" "primitiveid-number" "Builds a raw polygon primitive with size vertices (everything is initially set to zero). Type is a number that refers to the way the vertices are interpreted to build polygons, and can be one of the following: 0=TRISTRIP, 1=QUADS, 2=TRILIST, 3=TRIFAN, 4=POLYGON" " (define mynewshape (build-polygons 100 0))\n")) ("build-sphere" ("slices-number stacks-number" "primitiveid-number" "A sphere with the resolution specified, texture mapped in normal \"world map\" style. @image{images/sphere}" " (define mynewshape (build-sphere 10 10))\n")) ("build-plane" ("" "primitiveid-number" "A single quad plane, texture mapped from 0->1 in both dimensions. @image{images/plane}" " (define mynewshape (build-plane))\n")) ("build-seg-plane" ("vertsx-number vertsy-number" "primitiveid-number" "A tesselated poly plane, texture mapped from 0->1 in both dimensions." " (define mynewshape (build-plane))\n")) ("build-cylinder" ("hsegments rsegments" "primitiveid-number" "A capped cylinder, texture map wrapped around, and badly wrapped around the ends. @image{images/cylinder}" " (define mynewshape (build-cylinder 10 10))\n")) ("build-line" ("numpoints-number" "primitiveid-number" "Builds a line consisting of numpoints points. The geometry is constantly camera facing and is texture mapped so the texture is stretched along the line from start to finish. You use the pdata functions to edit the postions and widths of the lines. If used lit, the normals are faked to approximate a circular cross section. Additionally, if solid rendering is cleared with (hint-none) and (hint-wire) is activated, a faster constant width line will be drawn - width specified by the (line-width) command. @image{images/line}" " (define mynewshape (build-line 10))\n")) ("build-text" ("text-string" "primitiveid-number" "Builds a sequence of planes, texture mapped so that a font texture can be used to display text. Might also be useful for more abstract things. The font assumed to be non proportional - there is an example font shipped with fluxus @image{images/text} Ok, so this isn't a very good font texture :)" " (texture (texture-load \"font.png\"))\n (define mynewshape (build-text \"hello\"))\n")) ("build-nurbs-sphere" ("hsegments rsegments" "primitiveid-number" "Builds a tesselated nurbs sphere, texture mapped in the same fashion as the poly sphere. @image{images/nurbs-sphere}" " (define mynewshape (build-nurbs-sphere 10 10))\n")) ("build-nurbs-plane" ("hsegments rsegments" "primitiveid-number" "Builds a tesselated nurbs plane, texture mapped in uv direction. @image{images/nurbs-plane}" " (define mynewshape (build-nurbs-plane 10 10))\n")) ("build-particles" ("count-number" "primitiveid-number" "Builds a particles primitive containing num points, all initially set to the origin. You use the pdata functions to edit the postions, colours and sizes. Particles come in two flavors, camera facing sprites, which are the default, can be textured and individually scaled; and points (when hint-points is set), which cannot be textured but are much faster to render, as they are hardware supported gl points. By default these point particles are square, turn on hint-anti-alias to make them circular. @image{images/sprites}" " (define mynewshape (build-particles 100))\n")) ("build-locator" ("" "primitiveid-number" "A locator is an empty primitive, useful for parenting to (when you don't want to have the parent object visible). This primitive can only be visualised with (hint-origin) to display it's local transform origin." " (define mynewshape (build-locator))\n")) ("build-pixels" ("width-number height-number" "primitiveid-number" "Makes a new pixel primitive. A pixel primitive is used for making procedural textures, which can then be applied to other primitives. For this reason, pixel primitives probably wont be rendered much, but you can render them to preview the texture on a flat plane." " (define mynewshape (build-pixels 100 100))\n")) ("pixels-upload" ("" "void" "Uploads the texture data, you need to call this when you've finished writing to the pixelprim, and while it's grabbed." " (define mynewshape (build-pixels 100 100))\n (pixels-upload mynewshape)\n")) ("pixels->texture" ("pixelprimitiveid-number" "textureid-number" "Returns a texture you can use exactly like a normal loaded one." " (define mynewshape (build-pixels 100 100))\n (upload-pixels mynewshape)\n (texture (pixels->texture mynewshape))\n")) ("build-blobby" ("numinfluences subdivisionsvec boundingvec" "primitiveid-number" "Blobby primitives are a higher level implicit surface representation in fluxus which is defined using influences in 3 dimesional space. These infuences are then summed together, and a particular value is \"meshed\" (using the marching cubes algorithm) to form a smooth surface. The influences can be animated, and the smooth surface moves and deforms to adapt, giving the primitive it's blobby name. build-blobby returns a new blobby primitive. Numinfluences is the number of \"blobs\". Subdivisions allows you to control the resolution of the surface in each dimension, while boundingvec sets the bounding area of the primitive in local object space. The mesh will not be calculated outside of this area. Influence positions and colours need to be set using pdata-set." " (define mynewshape (build-blobby 7 (vector 30 30 30) (vector 3 3 3)))\n")) ("draw-instance" ("primitiveid-number" "void" "Copies a retained mode primitive and draws it in the current state as an immediate mode primitive." " (define mynewshape (build-cube))\n (colour (vector 1 0 0))\n (draw-instance mynewshape) ; draws a copy of mynewshape\n")) ("draw-cube" ("" "void" "Draws a cube in the current state in immediate mode primitive." " (define (render)\n     (draw-cube))\n (every-frame (render))\n")) ("draw-plane" ("" "void" "Draws a plane in the current state in immediate mode primitive." " (define (render)\n     (draw-plane))\n (every-frame (render))\n")) ("draw-sphere" ("" "void" "Draws a sphere in the current state in immediate mode primitive." " (define (render)\n     (draw-sphere))\n (every-frame (render))\n")) ("draw-cylinder" ("" "void" "Draws a cylinder in the current state in immediate mode primitive." " (define (render)\n     (draw-cylinder))\n (every-frame (render))\n")) ("destroy" ("primitiveid-number" "void" "Deletes a built primitive from the renderer. primitive." " (define mynewshape (build-sphere 10 10))\n (destroy mynewshape)\n"))))) ("Turtle" ("The turtle polybuilder is an experimental way of building polygonal objects using a logo style turtle in 3D space. As you drive the turtle around you can place vertices and build shapes procedurally. The turtle can also be used to deform existing polygonal primitives, by attaching it to objects you have already created." " (define (build n)\n     (turtle-reset)\n     (turtle-prim 4)\n     (build-loop n n)\n     (turtle-build))\n \n (define (build-loop n t)\n     (turtle-turn (vector 0 (/ 360 t) 0))\n     (turtle-move 1)\n     (turtle-vert)\n     (if (< n 1)\n         0\n         (build-loop (- n 1) t)))\n" (("turtle-prim" ("type-number" "void" "Starts building a new polygon primitive with the turtle. The type specifies the polygon face type and is one of the following: 0: triangle strip, 1: quad list, 2: triangle list, 3: triangle fan, 4: general polygon" " (turtle-prim 0)\n")) ("turtle-vert" ("" "void" "Creates a new vertex in the current position, or sets the current vertex if the turtle builder is attached." " (turtle-vert)\n")) ("turtle-build" ("" "primitiveid-number" "Builds the object with the vertex list defined and gives it to the renderer. Has no effect if the turtle builder is attached to a primitive." " (define mynewshape (turtle-build))\n")) ("turtle-move" ("distance-number" "void" "Moves the turtle forward in it's current orientation." " (turtle-move 1)\n")) ("turtle-push" ("" "void" "The turtle build has it's own transform stack. Push remembers the current position and orientation." " (turtle-push)\n")) ("turtle-pop" ("" "void" "The turtle build has it's own transform stack. Pop forgets the current position and orientation, and goes back to the state at the last push." " (turtle-pop)\n")) ("turtle-turn" ("rotation-vector" "void" "Rotates the turtle's orientation with the supplied euler angles (rotations in x, y and z)." " (turtle-turn (vector 45 0 0))\n")) ("turtle-reset" ("" "void" "Resets the current postion and rotation of the turtle to the origin." " (turtle-reset)\n")) ("turtle-attach" ("primitiveid-number" "void" "Attaches the turtle to an existing poly primitive. This means you are able to deform an existing objects points using the turtle builder." " (define myshape (build-sphere 10 10))\n (turtle-attach myshape)\n")) ("turtle-skip" ("count-number" "void" "When attached, causes the turtle to skip vertices. This value may be negative, which will set the turtle to write to previous vertices." " (turtle-skip -1)\n")) ("turtle-position" ("" "count-number" "When attached, returns the current pdata index the turtle is writing to." " (display (turtle-position))(newline)\n")) ("turtle-seek" ("position-number" "void" "When attached, sets the absolute pdata index the turtle is writing to." " (turtle-seek 0)\n"))))) ("UtilFunctions" ("Handy functions to make your life easier..." "" (("time" ("" "time-number" "Returns the number of seconds (+ fraction) since midnight January 1st 1970. This is the simpest animation source for your scripts." " (define (animate)\n     (rotate (sin (time)) 0 0)\n     (draw-cube))\n (every-frame (animate))    \n")) ("delta" ("" "time-number" "Time in seconds since the last frame. Used to make animation frame rate independant." " (define (animate)\n     (rotate (* (delta) 10) 0 0) \n     (draw-cube))\n (every-frame (animate))    \n")) ("flxrnd" ("" "random-number" "Returns a random number between 0 and 1" " (define (animate)\n     (colour (flxrnd) (flxrnd) (flxrnd)) \n     (draw-cube))\n (every-frame (animate))\n")) ("flxseed" ("seed-number" "void" "Seeds the random number generator so we can get the same sequence." " (define (animate)\n     (colour (flxrnd) (flxrnd) (flxrnd)) \n     (draw-cube))\n (flxseed 10) \n (every-frame (animate)) ; the same seqence of colours will be generated\n")) ("searchpaths" ("paths-list" "void" "Sets a list of search path strings to use for looking for fluxus related files, such as textures, shaders etc. Paths will be searched in order each time." " (searchpaths (list \"/path/to/my/textures\" \"/path/to/my/other/textures\"))\n")) ("fullpath" ("filename-string" "fullpath-string" "Searches the search paths for the specified file and returns the first location it finds." " (fullpath \"myfile\")\n")) ("framedump" ("filename" "void" "Saves out the current OpenGL front buffer to disk. Reads the filename extension to decide on the format used for saving, \"tif\", \"jpg\" or \"ppm\" are supported. This is the low level form of the frame dumping, use start-framedump and end-framedump instead." " (framedump \"picture.jpg\")\n"))))) ("OSC" ("OSC stands for Open Sound Control, and is a widely used protocol for passing data between multimedia applications. Fluxus can send or receive messages." " An example of using osc to communicate between pd and fluxus.\n A fluxus script to move a cube based on incoming osc messages.\n -- osc.scm\n\n (define value 0)\n\n (define (test)\n     (push)\n     (if (osc-msg \"/zzz\")\n         (set! value (osc 0)))\n     (translate (vector 1 0 value))\n     (draw-cube)\n     (pop))\n \n (osc-source \"6543\")\n (every-frame (test))\n \n --- EOF\n A PD patch to send control messages to fluxus:\n --- zzz.pd\n #N canvas 618 417 286 266 10;\n #X obj 58 161 sendOSC;\n #X msg 73 135 connect localhost 6543;\n #X msg 58 82 send /zzz \\$1;\n #X floatatom 58 29 5 0 0 0 - - -;\n #X obj 58 54 / 100;\n #X obj 73 110 loadbang;\n #X connect 1 0 0 0;\n #X connect 2 0 0 0;\n #X connect 3 0 4 0;\n #X connect 4 0 2 0;\n #X connect 5 0 1 0;\n" (("osc-source" ("port-string" "void" "Starts up the osc server, or changes port. Known bug: seems to fail if you set it back to a port used previously." " (osc-source \"4444\")\t ; listen to port 4444 for osc messages\n")) ("osc-msg" ("name-string" "msgreceived-boolean" "Returns true if the message has been received since the last frame, and sets it as the current message for subsequent calls to (osc) for reading the arguments." " (cond \n     ((osc-msg \"/hello\")              ; if a the /hello message is recieved\n         (display (osc 1))(newline)))\t; print out the first argument\n")) ("osc" ("argument-number" "oscargument" "Returns the argument from the current osc message." " (cond \n     ((osc-msg \"/hello\")              ; if a the /hello message is recieved\n         (display (osc 1))(newline)))\t; print out the first argument\n")) ("osc-destination" ("port-string" "void" "Specifies the destination for outgoing osc messages. The port name needs to specify the whole url and should look something like this \"osc.udp://localhost:4444\"" " (osc-destination \"osc.udp:localhost:4444\")\n (osc-send \"/hello\" \"s\" (list \"boo!\"))  ; send a message to this destination\n")) ("osc-peek" ("" "msg-string" "This util function returns the name, and format string and number/string arguments of the last sent message as a string - for debugging your osc network." " (display (osc-peek))(newline) \n")) ("osc-send" ("name-string format-string argument-list" "void" "Sends an osc message with the argument list as the osc data. Only supports floats, ints and strings as data. The format-string should be composed of \"i\", \"f\" and \"s\", and must match the types given in the list. This could probably be removed by using the types directly, but doing it this way allows you to explicitly set the typing for the osc message." " (osc-destination \"osc.udp:localhost:4444\")\n (osc-send \"/hello\" \"sif\" (list \"boo!\" 3 42.3))  ; send a message to this destination\n"))))) ("ScratchPadCamera" ("Camera functions availible in the fluxus scratchpad." "" (("reset-camera" ("" "void" "Resets the camera transform, useful if it becomes trashed, or you get lost somewhere in space. Also turns off camera locking to objects with (lock-camera)" " ; ruin the camera transform\n (set-camera-transform (vector 123 41832 28 0.2 128 0.001 123 41832 28 0.2 128 0.001 0.2 100 13 1931)) \n ; set it back to the starting position/orientation\n (reset-camera) \n")) ("set-camera-transform" ("transform-matrix" "void" "Overrides and locks the camera transform with your own. To unlock again call reset-camera" " (set-camera-transform (mtranslate 0 0 -10)) \n")) ("get-camera-transform" ("" "transform-matrix" "Returns the current camera transform. To unlock again call reset-camera" " (define tx (get-camera-transform))\n"))))) ("ScratchPadInput" ("Input functions availible in the fluxus scratchpad." "" (("key-pressed" ("key-string" "boolean" "Returns true if the specified key is currently pressed down." " (if (key-pressed \"q\") (display \"q pressed!))\n")) ("keys-down" ("" "keys-list" "Returns a list of keys pressed down" " (display (keys-down))\n")) ("key-special-pressed" ("key-number" "boolean" "Returns true if the specified special key is currently pressed down. Special keys are ones which do not map to ascii values. The easiest way of finding what they are is to print out the result of key-special-pressed while holding down the key you are after." "\n (if (key-special-pressed 100) (display \"left cursor pressed\"))\n (if (key-special-pressed 102) (display \"right cursor pressed\"))\n (if (key-special-pressed 101) (display \"up cursor pressed\"))\n (if (key-special-pressed 103) (display \"down cursor pressed\"))\n")) ("keys-special-down" ("" "keys-list" "Returns a list of special keys pressed down" " (display (keys-special-down))\n")) ("mouse-x" ("" "coord-number" "Returns the x position of the mouse" " (display (mouse-x))\n")) ("mouse-y" ("" "coord-number" "Returns the y position of the mouse" " (display (mouse-y))\n")) ("mouse-button" ("" "boolean" "Returns true if the specifed mouse button is pressed" " (display (mouse-button 1))\n")) ("mouse-over" ("" "primitiveid-number" "Returns the object the mouse is currently over." " (grab (mouse-over))\n (colour (vector 1 0 0)) ; paints objects the mouse is over red\n (ungrab)\n"))))) ("ScratchPad" ("The scratchpad is the fluxus editor and gl window." "" (("every-frame" ("callback-function" "void" "Sets a function to be called every time the render is about to draw a new frame." "   (define count 0)\n  \n   (define (myfunc)\n       (display count)(display \" frames have been rendered!\")\n       (newline)\n       (set! count (+ count 1)))\n  \n   (every-frame (myfunc)) \n  ")) ("clear" ("" "void" "Clears out the renderer of all objects and lights. Clears the physics system and resets the every-frame callback. Generally a Good Thing to put this at the beginning of scripts to make sure everything is cleared out each time you execute." "   (clear) ; without this we would accumulate a new cube every time F5 was pressed\n   (build-cube) \n  ")) ("start-framedump" ("name-string type-string" "void" "Starts saving frames to disk. Type can be one of \"tif\", \"jpg\" or \"ppm\". Filenames are built with the frame number added, padded to 5 zeros." "   (start-framedump \"frame\" \"jpg\") \n  ")) ("end-framedump" ("" "void" "Stops saving frames to disk." "   (end-framedump) \n  ")) ("help" ("function-string" "void" "Displays help information on a fluxus function. For running in the repl mainly." "   (help \"pop\") \n  "))))))