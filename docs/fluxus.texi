\input texinfo @c -*-texinfo-*- 

@setfilename fluxus.info
@settitle  Fluxus documentation v0.12
@afourpaper 

@node Top
@top Fluxus
@menu
* Audio:: Audio
* GlobalState:: GlobalState
* LocalState:: LocalState
* OSC:: OSC
* Camera:: Camera
@end menu
@node Audio
@chapter Audio
This part of fluxus is responsible for capturing the incoming sound, and processing it into harmonic data, using fft (Fast Fourier Transform). The harmonics are bands of frequency which the sound is split into, giving some indication of the quality of the sound. It's the same as you see on a graphic equaliser - in fact, one of the example scripts (bars.scm) acts as a graphic equaliser display, and should be used to test the audio is working.
@subsection Example
@lisp
 (start-audio "alsa_pcm:capture_1" 1024 44100)
 (define (animate)
		(colour (vector (gh 1) (gh 2) (gh 3))) ; make a colour from the harmonics, and set it to be the current colour 
		(draw-cube)) ; draw a cube with this colour
 (every-frame (animate))

@end lisp
@section (start-audio jackport-string buffersize-number samplerate-number)
@subsection Returns
void
@subsection Description
Starts up the audio with the specified settings, you'll need to call this first, or put it into $HOME/.fluxus/startup.scm to call it automatically at startup. Make the jack port name an empty string and it won't try to connect to anything for you. You can use qjackctrl or equivelent to do the connection manually. Fluxus reads a single mono source.
@subsection Example
@lisp
 (start-audio "alsa_pcm:capture_1" 1024 44100)

@end lisp

@section (gh harmonic-number)
@subsection Returns
harmonic-real
@subsection Description
Fluxus converts incoming audio into harmonic frequencies, which can then be plugged into your animations using this command. There are 16 harmonic bands availible, the harmonic-value argument will be wrapped around if greater or less than 16, so you can use this command without worrying about out of range errors.
@subsection Example
@lisp
 (define (animate)
		(colour (vector (gh 1) (gh 2) (gh 3))) ; make a colour from the harmonics, and set it to be the current colour 
		(draw-cube)) ; draw a cube with this colour
 (every-frame (animate))

@end lisp

@section (gain gain-number)
@subsection Returns
void
@subsection Description
Sets the gain level for the fft sound, it's 1 by default.
@subsection Example
@lisp
 (gain 100) ; too quiet?!

@end lisp

@section (process wavfile-string)
@subsection Returns
void
@subsection Description
This command temporarally disables the realtime reading of the input audio stream and reads a wav file instead. For use with the framedump command to process audio offline to make music videos. The advantage of this is that it locks the framerate so the right amount of audio gets read for each frame - making syncing of the frames and audio files possible.
@subsection Example
@lisp
 (process "somemusic.wav") ; read a precorded audio file

@end lisp

@section (smoothing-bias value-number)
@subsection Returns
void
@subsection Description
A kind of weighted average for the harmonic bands which smooth them out over time. This setting defaults to 1.5. The best value really depends on the quality of the music, and the buffer sizes, and ranges from 0 -> 2. It's more obvious if you give it a try with the bars.scm script
@subsection Example
@lisp
 (smoothing-bias 0) ; no smoothing

@end lisp

@section (update-audio)
@subsection Returns
void
@subsection Description
Updates the audio subsytem. This function is called for you (per frame) in fluxus-canvas.ss.
@subsection Example
@lisp
 (smoothing-bias 0) ; no smoothing

@end lisp

@node GlobalState
@chapter GlobalState
Global state is really anything that controls the renderer globally, so it affects all primitives or controls the renderer directly - ie camera control or full screen effects like blurring.
@subsection Example
@lisp

@end lisp
@section (clear-engine)
@subsection Returns
void
@subsection Description
Clears the renderer, and physics system. This command should not be called directly, use clear instead, as this clears a few other things, and calls clear-engine itself.
@subsection Example
@lisp
 (clear-engine) ; woo hoo!

@end lisp

@section (blur amount-number)
@subsection Returns
void
@subsection Description
Sets the full screen blur setting. Less is more, but if you set it too low it will make the on screen editing impossible to read, so save your script first :)
@subsection Example
@lisp
 (blur 0.1) ; for nice trails

@end lisp

@section (fog fogcolour-vector amount-number begin-number end-number)
@subsection Returns
void
@subsection Description
Sets the fogging parameters to give a visual depth cue (aerial perspective in painter's jargon). This can obscure the on screen editing, so keep the amount small.
@subsection Example
@lisp
 (clear-colour (vector 0 0 1))   ; looks nice if the background matches
 (fog (vector 0 0 1) 0.01 1 100) ; blue fog

@end lisp

@section (feedback amount-number)
@subsection Returns
void
@subsection Description
Full screen feedback for Jeff Minter style crazyness (renders the last frame in the background, including the previous feedback background...). This allocates large amounts of texture space and seems to be unstable, so it's probably better not to use it. If you do, use with feedback-transform, but don't say I didn't warn you.
@subsection Example
@lisp
 (feedback 0.1) ; set the feedback amount
 (build-cube)
 (define (animate)
     (feedback-transform (mrotate (vector 1 1 (* 45 (sin (time))))))) ; change the transform
 (every-frame (animate))

@end lisp

@section (feedback-transform matrix-vector)
@subsection Returns
void
@subsection Description
Sets the transform for the feedback plane. See feedback for more details, probably shouldn't be used.
@subsection Example
@lisp
 (feedback 0.1) ; set the feedback amount
 (build-cube)
 (define (animate)
     (feedback-transform (mrotate (vector 1 1 (* 45 (sin (time))))))) ; change the transform
 (every-frame (animate))

@end lisp

@section (show-axis show-number)
@subsection Returns
void
@subsection Description
Shows the worldspace origin axis. used.
@subsection Example
@lisp
 (show-axis 1)

@end lisp

@section (show-fps show-number)
@subsection Returns
void
@subsection Description
Shows an fps count in the lower left of the screen. used.
@subsection Example
@lisp
 (show-fps 1)

@end lisp

@section (lock-camera primitiveid-number)
@subsection Returns
void
@subsection Description
Locks the camera transform onto the specified primitive's transform. It's like parenting the camera to the object. This is the easiest way to procedurally drive the camera. Use an id number of 0 to unlock the camera.
@subsection Example
@lisp
 (clear)
 (define obj (build-cube)) ; make a cube for the camera to lock to
 
 (push) ; make a background cube so we can tell what's happening
 (hint-wire)  
 (hint-unlit) 
 (colour (vector 0 0.4 0))
 (scale (vector -50 -50 -50))
 (build-cube)
 (pop)
 
 (lock-camera obj) ; lock the camera to our first cube
 
 (define (animate)
     (grab obj)
     (rotate (vector 1 0 0)) ; rotate the cube
     (ungrab))
 
 (every-frame (animate))

@end lisp

@section (camera-lag amount-number)
@subsection Returns
void
@subsection Description
The camera locking has an inbuilt lagging which means it will smoothly blend the movement relative to the primitive it's locked to.
@subsection Example
@lisp
 (clear)
 (define obj (build-cube)) ; make a cube for the camera to lock to
 
 (push) ; make a background cube so we can tell what's happening
 (hint-wire)
 (hint-unlit)
 (colour (vector 0 0.4 0))
 (scale (vector -50 -50 -50))
 (build-cube)
 (pop)
 
 (lock-camera obj) ; lock the camera to our first cube
 (camera-lag 0.1)  ; set the lag amount, this will smooth out the cube jittery movement
 
 (define (animate)
     (grab obj)
     (identity)
     (translate (vector (modulo (round (inexact->exact (time))) 6) 0 0)) ; make a jittery movement
     (ungrab))
 
 (every-frame (animate))

@end lisp

@section (load-texture pngfilename-string)
@subsection Returns
textureid-number
@subsection Description
Loads a texture from disk, converts it to a texture, and returns the id number. The texture loading is memory cached, so repeatedly calling this will not cause it to load again. Use force-load-texture if you are changing the texture while running the script. The png may be RGB or RGBA to use alpha transparency.
@subsection Example
@lisp
 (texture (load-texture "mytexture.png"))
 (build-cube) ; the cube will be texture mapped with the image

@end lisp

@section (load-texture pngfilename-string)
@subsection Returns
textureid-number
@subsection Description
Uncached loading of textures from disk, converts it to a texture, and returns the id number. Useful if you are changing the texture while running the script, otherwise use load-texture, which will be much faster. The png may be RGB or RGBA to use alpha transparency.
@subsection Example
@lisp
 (texture (force-load-texture "mytexture.png"))
 (build-cube) ; the cube will be texture mapped with the image

@end lisp

@section (frustum top-number bottom-number left-number right-number)
@subsection Returns
void
@subsection Description
Sets the camera frustum, and thus the aspect ratio of the frame.
@subsection Example
@lisp
 (frustum -1 1 -0.75 0.75) ; default settings

@end lisp

@section (clip front-number back-number)
@subsection Returns
void
@subsection Description
Sets the front & back clipping planes for the camera frustum, and thus the viewing angle. Change the front clipping distance to alter the perspective from telephoto to fisheye.
@subsection Example
@lisp
 (clip 1 10000) ; default settings

@end lisp

@section (ortho)
@subsection Returns
void
@subsection Description
Sets orthographic projection - i.e. no perspective.
@subsection Example
@lisp
 (ortho) 

@end lisp

@section (persp)
@subsection Returns
void
@subsection Description
Sets perspective projection (the default) after ortho has been set.
@subsection Example
@lisp
 (persp) 

@end lisp

@section (set-ortho-zoom amount-number)
@subsection Returns
void
@subsection Description
Sets the zoom level for the orthographic projection.
@subsection Example
@lisp
 (set-ortho-zoom 2) 

@end lisp

@section (backfacecull setting-number)
@subsection Returns
void
@subsection Description
Turns backface culling on or off. Backface culling speeds up rendering by removing faces not orientated towards the camera. Defaults to on, but this is not always desired, eg for double sided polygons.
@subsection Example
@lisp
 (backfacecull 0) 

@end lisp

@section (clear-colour colour-vector)
@subsection Returns
void
@subsection Description
Sets the colour we clear the renderer with, this forms the background colour for the scene.
@subsection Example
@lisp
 (clear-colour (vector 1 0 0)) ; RED!!!

@end lisp

@section (clear-frame setting-number)
@subsection Returns
void
@subsection Description
Sets the frame and zbuffer clearing on or off.
@subsection Example
@lisp
 (clear-frame 0) 

@end lisp

@section (get-camera-transform)
@subsection Returns
matrix-vector
@subsection Description
Gets the current camera transform matrix.
@subsection Example
@lisp
 (get-camera-transform) 

@end lisp

@section (set-camera)
@subsection Returns
void
@subsection Description
Sets the camera transform matrix. This is the low level interface used by set-camera-transform, which you should generally use instead.
@subsection Example
@lisp
 (set-camera) 

@end lisp

@section (get-projection-transfrom)
@subsection Returns
projection-matrix
@subsection Description
Gets the current projection matrix.
@subsection Example
@lisp
 (get-projection-transfrom) 

@end lisp

@section (get-screen-size)
@subsection Returns
size-vector
@subsection Description
Returns a vector containing the current width and height of the window.
@subsection Example
@lisp
 (get-screen-size) 

@end lisp

@section (set-screen-size size-vector)
@subsection Returns
void
@subsection Description
Sets the window width and height.
@subsection Example
@lisp
 (set-screen-size (vector 10 10)) ; small window time :) 

@end lisp

@section (select screenxpos-number screenypos-number pixelssize-number)
@subsection Returns
primitiveid-number
@subsection Description
Looks in the region specified and returns the id of the closest primitive to the camera rendered there, or 0 if none exist.
@subsection Example
@lisp
 (display (select 10 10 2))(newline)

@end lisp

@section (desiredfps fps-number)
@subsection Returns
void
@subsection Description
Throttles the renderer so as to not take 100% cpu. This gives an upper limit on the fps rate, which doesn't quite match the given number, but I'm working on it...
@subsection Example
@lisp
 (desiredfps 100000) ; makes fluxus render as fast as it can, and take 100% cpu.

@end lisp

@node LocalState
@chapter LocalState
The local state functions control rendering either for the current state - or the state of the currently grabbed primitive. In fluxus state means the way that things are displayed, either turning on and off rendering features, changing the style of different features, or altering the current transform.
@subsection Example
@lisp

@end lisp
@section (push)
@subsection Returns
void
@subsection Description
Pushes a copy of the current drawing state to the top of the stack. The drawing state contains information about things like the current colour, transformation and hints.
@subsection Example
@lisp
 (colour (vector 1 0 0)) ; set current colour to red
 (push)                  ; copy and push drawing state
 (colour (vector 0 1 0)) ; set current colour to green
 (draw-cube)             ; draws a green cube
 (pop)				   ; forget old drawing state
 ; current colour is now red again

@end lisp

@section (pop)
@subsection Returns
void
@subsection Description
Destroys the current drawing state, and sets the current one to be the previously pushed one in the stack. The drawing state contains information about things like the current colour, transformation and hints.
@subsection Example
@lisp
 (colour (vector 1 0 0)) ; set current colour to red
 (push)                  ; copy and push drawing state
 (colour (vector 0 1 0)) ; set current colour to green
 (draw-cube)             ; draws a green cube
 (pop)				   ; forget old drawing state
 ; current colour is now red again

@end lisp

@section (grab object-id)
@subsection Returns
void
@subsection Description
Grabs the specified object. Once an object has grabbed it's state can be modified using the same commands used to set the current drawing state. (ungrab) needs to be used to return to the normal drawing state. Grabbing can also be stacked, in which case ungrab pops to the last grabbed primitive.
@subsection Example
@lisp
 (colour (vector 1 0 0))      ; set the current colour to red
 (define mycube (build-cube)) ; makes a red cube 
 (grab mycube)  				       
 (colour (vector 0 1 0)) ; sets the cubes colour to green 
 (ungrab)				   ; return to normal state

@end lisp

@section (ungrab)
@subsection Returns
void
@subsection Description
Ungrabs the currently grabbed object, and either returns to the normal drawing state, or pops to the last grabbed primitive.
@subsection Example
@lisp
 (colour (vector 1 0 0))      ; set the current colour to red
 (define mycube (build-cube)) ; makes a red cube 
 (grab mycube)  				       
 (colour (vector 0 1 0)) ; sets the cubes colour to green 
 (ungrab)				   ; return to normal state

@end lisp

@section (apply object-id)
@subsection Returns
void
@subsection Description
Applies the current object transform to the vertex positions of the supplied object and sets it's transform to identity.
@subsection Example
@lisp
 (rotate (vector 45 0 0))     
 (define mycube (build-cube)) ; makes a cube with a rotation 
 (apply mycube)  				; applies the rotation to the points of the cube

@end lisp

@section (opacity value)
@subsection Returns
void
@subsection Description
Sets the opacity of the current drawing state, or the currently grabbed primitive.
@subsection Example
@lisp
 (opacity 0.5)     
 (define mycube (build-cube)) ; makes a half transparent cube 

@end lisp

@section (shinyness value)
@subsection Returns
void
@subsection Description
Sets the shinyness of the current drawing state, or the currently grabbed primitive. This value sets the tightness of the specular highlight.
@subsection Example
@lisp
 (shinyness 100)     
 (specular (vector 1 1 1)) ; sets the specular colour
 (define mysphere (build-sphere 10 10)) ; makes a shiny cube 

@end lisp

@section (colour colour-vector)
@subsection Returns
void
@subsection Description
Sets the colour of the current drawing state, or the currently grabbed primitive.
@subsection Example
@lisp
 (colour (vector 1 0.5 0.1)) ; mmm orange...   
 (define mycube (build-cube)) ; makes an orange cube 

@end lisp

@section (wire-colour colour-vector)
@subsection Returns
void
@subsection Description
Sets the wire frame colour of the current drawing state, or the currently grabbed primitive. Visible with (hint-wire) on most primitives.
@subsection Example
@lisp
 (wire-colour (vector 1 1 0)) ; set yellow as current wire colour
 (hint-wire)   
 (define mycube (build-cube)) ; makes a cube with yellow wireframe 

@end lisp

@section (specular colour-vector)
@subsection Returns
void
@subsection Description
Sets the specular colour of the current drawing state, or the currently grabbed primitive.
@subsection Example
@lisp
 (specular (vector 0 0 1)) ; set blue as specular colour
 (define mysphere (build-sphere 10 10)) ; makes a shiny blue sphere

@end lisp

@section (ambient colour-vector)
@subsection Returns
void
@subsection Description
Sets the ambient colour of the current drawing state, or the currently grabbed primitive.
@subsection Example
@lisp
 (ambient (vector 0 0 1)) ; set blue as ambient colour
 (define mysphere (build-sphere 10 10)) ; makes a boringly blue sphere 

@end lisp

@section (opacity value)
@subsection Returns
void
@subsection Description
Sets the emissive colour of the current drawing state, or the currently grabbed primitive.
@subsection Example
@lisp
 (emissive (vector 0 0 1)) ; set blue as emissive colour
 (define mysphere (build-sphere 10 10)) ; makes an bright blue sphere 

@end lisp

@section (identity)
@subsection Returns
void
@subsection Description
Sets the drawing state transform to identity, on the state stack, or the currently grabbed primitive.
@subsection Example
@lisp
 (push)
 (scale (vector 2 2 2)) ; set the current scale to double in each dimension
 (define mycube (build-cube)) ; make a scaled cube 
 (pop)
 (grab mycube)
 (identity) ; erases the transform and puts the cube back to its original state
 (ungrab)

@end lisp

@section (concat matrix)
@subsection Returns
void
@subsection Description
Concatenates (multiplies) a matrix on to the current drawing state or grabbed primitive.
@subsection Example
@lisp
 (define mymatrix (mrotate (vector 0 45 0))) ; make a matrix
 (concat mymatrix) ; concat it into the current state
 (build-cube) ; make a cube with this rotation

@end lisp

@section (translate vector)
@subsection Returns
void
@subsection Description
Applies a translation to the current drawing state transform or grabbed primitive.
@subsection Example
@lisp
 (transform (vector 0 1.4 0)) ; translates the current transform up a bit
 (build-cube) ; build a cube with this transform

@end lisp

@section (rotate vector-or-quaternion)
@subsection Returns
void
@subsection Description
Applies a rotation to the current drawing state transform or grabbed primitive.
@subsection Example
@lisp
 (rotate (vector 0 45 0)) ; turns 45 degrees in the Y axis
 (build-cube) ; build a cube with this transform

@end lisp

@section (scale vector)
@subsection Returns
void
@subsection Description
Applies a scale to the current drawing state transform or grabbed primitive.
@subsection Example
@lisp
 (scale (vector 0.5 0.5 0.5)) ; scales the current transform to half the size
 (build-cube) ; build a cube with this transform

@end lisp

@section (get-transform)
@subsection Returns
matrix-vector
@subsection Description
Returns: a matrix representing the current state transform or for the grabbed primitive.
@subsection Example
@lisp
 (translate (vector 1 0 0))
 (display (get-transform))(newline) ; prints the current transform
 (define shape (build-sphere 10 10))
 (grab shape)
 (translate (vector 0 1 0))
 (display (get-transform))(newline) ; prints shape's transform
 (ungrab)

@end lisp

@section (parent primitive-id)
@subsection Returns
void
@subsection Description
Parents the currently grabbed primitive to the supplied parent primitive. The current primitive will now be moved around with the parent by aquiring all the parent's transforms.
@subsection Example
@lisp
 (define parent-prim (build-cube)) ; make a parent cube
 (translate (vector 2 0 0)) ; move a bit in x
 (parent parent-prim) ; set parent-prim as the current parent
 (define child-prim (build-cube)) ; make a child cube
 (grab parent-prim) 
 (rotate (vector 0 45 0)) ; the child will now be moved by this transform in addition to its own
 (ungrab)

@end lisp

@section (line-width value)
@subsection Returns
void
@subsection Description
Sets the line width (in screen space) of the current drawing state, or the currently grabbed primitive. Affects wireframe and things like that.
@subsection Example
@lisp
 (line-width 5)
 (hint-wire)
 (build-sphere 10 10) ; make a sphere with thick wireframe

@end lisp

@section (point-width value)
@subsection Returns
void
@subsection Description
Sets the point width (in screen space) of the current drawing state, or the currently grabbed primitive. Affects point rendering and particles in hardware point mode.
@subsection Example
@lisp
 (point-width 5)
 (hint-points)
 (build-sphere 10 10) ; make a sphere with thick points

@end lisp

@section (blend-mode src dst)
@subsection Returns
void
@subsection Description
Sets the blend mode of the current drawing state, or the currently grabbed primitive. This is the way that alpha is composited to the rendering surface.
@subsection Example
@lisp
 (point-width 5)
 (hint-points)
 (build-sphere 10 10) ; make a sphere with thick points

@end lisp

@section (hint-solid)
@subsection Returns
void
@subsection Description
Sets the render hints to solid of the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint.
@subsection Example
@lisp
 (hint-solid) ; this is the default render style so this isn't too exciting
 (build-cube) ; make a solid rendered cube 

@end lisp

@section (hint-wire)
@subsection Returns
void
@subsection Description
Sets the render hints to wireframe of the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint.
@subsection Example
@lisp
 (hint-wire)
 (build-cube) ; make a wirefame rendered cube 

@end lisp

@section (hint-normal)
@subsection Returns
void
@subsection Description
Sets the render hints to display normals in the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint.
@subsection Example
@lisp
 (hint-normal)
 (build-cube) ; display the normals on this cube 

@end lisp

@section (hint-points)
@subsection Returns
void
@subsection Description
Sets the render hints to display points in the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint.
@subsection Example
@lisp
 (hint-points)
 (build-cube) ; display the vertex points on this cube 

@end lisp

@section (hint-anti-alias)
@subsection Returns
void
@subsection Description
Sets the render hints to anti-alias in the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint.
@subsection Example
@lisp
 (hint-anti-alias)
 (build-cube) ; display a smoothed cube 

@end lisp

@section (hint-unlit)
@subsection Returns
void
@subsection Description
Sets the render hints to unlit in the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint.
@subsection Example
@lisp
 (hint-unlit)
 (build-cube) ; display an unlit cube

@end lisp

@section (hint-vertcols)
@subsection Returns
void
@subsection Description
Sets the render hints to use vertex colours in the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint. Vertex colours override the current (colour) state.
@subsection Example
@lisp
 (hint-vertcols)
 (define mycube (build-cube)) ; make a cube with vertcols enabled
 (grab mycube)
 (pdata-set "c" 0 (vector 0 1 0)) ; set the colour of the first vertex to green
 (ungrab)

@end lisp

@section (hint-box)
@subsection Returns
void
@subsection Description
Sets the render hints to bounding box display in the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint.
@subsection Example
@lisp
 (hint-box)
 (build-sphere 10 10) ; make a sphere with bounding box displayed

@end lisp

@section (hint-multitex)
@subsection Returns
void
@subsection Description
Sets the render hints to use multitexturing in the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint.
@subsection Example
@lisp
 (hint-multitexture)
 (multitexture 0 (load-texture "tex1.png"))
 (multitexture 1 (load-texture "tex2.png"))
 (build-sphere 10 10) ; make a sphere with overlayed textures

@end lisp

@section (hint-none)
@subsection Returns
void
@subsection Description
Clears the render hints in the current drawing state, or the currently grabbed primitive. This allows you mainly to get rid of the default solid style, but also means that you can turn on and off hints without using push or pop.
@subsection Example
@lisp
 (hint-none)
 (hint-wire)
 (build-cube) ; make a cube only visible with wireframe

@end lisp

@section (hint-origin)
@subsection Returns
void
@subsection Description
Sets the render hints to display the object space origin of the primitive the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint.
@subsection Example
@lisp
 (hint-origin)
 (build-sphere 10 10) ; make a sphere with the origin displayed

@end lisp

@section (hint-cast-shadow)
@subsection Returns
void
@subsection Description
(note: Not yet implemented) Sets the render hints to cast shadows for the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint.
@subsection Example
@lisp
 (hint-origin)
 (build-sphere 10 10) ; make a sphere with the origin displayed

@end lisp

@section (hint-ignore-depth)
@subsection Returns
void
@subsection Description
Sets the render hints to ignore depth tests for the current drawing state, or the currently grabbed primitive. Render hints change the way that primitives are rendered, but may have different effects - or no effect on certain primitive types, hence the name hint. This feature is useful for rendering transparent objects, as it means objects will be shown behind previously rendered ones.
@subsection Example
@lisp
 (hint-origin)
 (build-sphere 10 10) ; make a sphere with the origin displayed

@end lisp

@section (texture textureid-number)
@subsection Returns
void
@subsection Description
Sets the texture of the current drawing state, or the currently grabbed primitive. Texture ids can be generated by the load-texture function.
@subsection Example
@lisp
 (texture (load-texture "mytexture.png"))
 (build-sphere 10 10) ; make a sphere textured with mytexture.png

@end lisp

@section (multitexture textureunit-number textureid-number)
@subsection Returns
void
@subsection Description
Sets the texture of the current drawing state, or the currently grabbed primitive in the same way as the texture function, but allows you to specify the texture unit (0-7) to apply the texture to. Multitexturing allows you to apply different textures and texture coordinates to the same object at once. Texture unit 0 is the default one (which uses the pdata "t" for it's texture coords) texture unit n looks for pdata "tn" - ie multitexture 1 looks for "t1". You need to add these yourself using (pdata-add) or (pdata-copy). Multitexturing is useful when the textures contain alpha, as they can be overlayed, i.e. decals placed on background textures. Note: fluxus needs to be built using scons MULTITEXTURE=1 to enable this feature.
@subsection Example
@lisp
 (define obj (build-sphere 10 10)) ; make a sphere 
 (grab obj)
 (multitexture 0 (load-texture "mytextureA.png")) 
 (multitexture 1 (load-texture "mytextureB.png"))
 (pdata-add "t1" "v")   ; make some texture coords for texture B
 (pdata-copy "t" "t1")  ; copy them from the default texture coords
 (ungrab)

@end lisp

@section (print-scene-graph)
@subsection Returns
void
@subsection Description
Prints out the current scene graph, useful for debugging.
@subsection Example
@lisp
 (print-scene-graph) ; exciting...

@end lisp

@section (hide hidden-number)
@subsection Returns
void
@subsection Description
Sets the hidden state for the grabbed primitive (also affects all child primitives). Hidden primitives can be treated as normal in every way - they just won't be rendered.
@subsection Example
@lisp
 (define obj (build-cube))
 (grab obj)
 (hide 1) ; hide this cube
 (ungrab)

@end lisp

@section (selectable selectable-number)
@subsection Returns
void
@subsection Description
Sets whether the grabbed primitive can be selected or not using the select command.
@subsection Example
@lisp
 (define obj (build-cube))
 (grab obj)
 (selectable 0) ; now it won't be "seen" by calling select
 (ungrab)

@end lisp

@section (shader vertexprogram-string fragmentprogram-string)
@subsection Returns
void
@subsection Description
Loads, compiles and sets the GLSL harware shader pair for the current drawing state, or the currently grabbed primitive. Requires OpenGL 2 support. The shader's uniform data can be controlled via shader-set! and all the pdata is sent through as per-vertex attribute data to the shader.
@subsection Example
@lisp
 (push)
 ; assign the shaders to the surface
 (shader "simplevert.glsl" "simplefrag.glsl")
 (define s (build-sphere 20 20))
 (pop)
 
 (grab s)
 ; add and set the pdata - this is then picked up in the vertex shader 
 ; as an input attribute called "testcol"
 (pdata-add "testcol" "v")
 (set-cols (pdata-size))
 (ungrab)
 
 (define (animate)
     (grab s)
 	; animate the deformamount uniform input parameter 
     (shader-set! (list "deformamount" (cos (time))))
     (ungrab))
 
 (every-frame (animate))
@end lisp

@section (shader-set! argument-list)
@subsection Returns
void
@subsection Description
Sets the uniform shader parameters for the GLSL shader. The list consists of token-string value pairs, which relate to the corresponding shader parameters names and values.
@subsection Example
@lisp
 (push)
 ; assign the shaders to the surface
 (shader "simplevert.glsl" "simplefrag.glsl")
 (define s (build-sphere 20 20))
 (pop)
 
 (grab s)
 ; add and set the pdata - this is then picked up in the vertex shader 
 ; as an input attribute called "testcol"
 (pdata-add "testcol" "v")
 (set-cols (pdata-size))
 (ungrab)
 
 (define (animate)
     (grab s)
 	; animate the deformamount uniform input parameter 
     (shader-set! (list "deformamount" (cos (time))))
     (ungrab))
 
 (every-frame (animate))

@end lisp

@node OSC
@chapter OSC
OSC stands for Open Sound Control, and is a widely used protocol for passing data between multimedia applications. Fluxus can send or receive messages.
@subsection Example
@lisp
 An example of using osc to communicate between pd and fluxus.
 A fluxus script to move a cube based on incoming osc messages.
 -- osc.scm

 (define value 0)

 (define (test)
     (push)
     (if (osc-msg "/zzz")
         (set! value (osc 0)))
     (translate (vector 1 0 value))
     (draw-cube)
     (pop))
 
 (osc-source "6543")
 (every-frame (test))
 
 --- EOF
 A PD patch to send control messages to fluxus:
 --- zzz.pd
 #N canvas 618 417 286 266 10;
 #X obj 58 161 sendOSC;
 #X msg 73 135 connect localhost 6543;
 #X msg 58 82 send /zzz \$1;
 #X floatatom 58 29 5 0 0 0 - - -;
 #X obj 58 54 / 100;
 #X obj 73 110 loadbang;
 #X connect 1 0 0 0;
 #X connect 2 0 0 0;
 #X connect 3 0 4 0;
 #X connect 4 0 2 0;
 #X connect 5 0 1 0;

@end lisp
@section (osc-source port-string)
@subsection Returns
void
@subsection Description
Starts up the osc server, or changes port. Known bug: seems to fail if you set it back to a port used previously.
@subsection Example
@lisp
 (osc-source "4444")	 ; listen to port 4444 for osc messages

@end lisp

@section (osc-msg name-string)
@subsection Returns
msgreceived-boolean
@subsection Description
Returns true if the message has been received since the last frame, and sets it as the current message for subsequent calls to (osc) for reading the arguments.
@subsection Example
@lisp
 (cond 
     ((osc-msg "/hello")              ; if a the /hello message is recieved
         (display (osc 1))(newline)))	; print out the first argument

@end lisp

@section (osc argument-number)
@subsection Returns
oscargument
@subsection Description
Returns the argument from the current osc message.
@subsection Example
@lisp
 (cond 
     ((osc-msg "/hello")              ; if a the /hello message is recieved
         (display (osc 1))(newline)))	; print out the first argument

@end lisp

@section (osc-destination port-string)
@subsection Returns
void
@subsection Description
Specifies the destination for outgoing osc messages. The port name needs to specify the whole url and should look something like this "osc.udp://localhost:4444"
@subsection Example
@lisp
 (osc-destination "osc.udp:localhost:4444")
 (osc-send "/hello" "s" (list "boo!"))  ; send a message to this destination

@end lisp

@section (osc-peek)
@subsection Returns
msg-string
@subsection Description
This util function returns the name, and format string and number/string arguments of the last sent message as a string - for debugging your osc network.
@subsection Example
@lisp
 (display (osc-peek))(newline) 

@end lisp

@section (osc-send name-string format-string argument-list)
@subsection Returns
void
@subsection Description
Sends an osc message with the argument list as the osc data. Only supports floats, ints and strings as data. The format-string should be composed of "i", "f" and "s", and must match the types given in the list. This could probably be removed by using the types directly, but doing it this way allows you to explicitly set the typing for the osc message.
@subsection Example
@lisp
 (osc-destination "osc.udp:localhost:4444")
 (osc-send "/hello" "sif" (list "boo!" 3 42.3))  ; send a message to this destination

@end lisp

@node Camera
@chapter Camera
Camera functions
@subsection Example
@lisp

@end lisp
@section (reset-camera)
@subsection Returns
void
@subsection Description
Resets the camera transform, useful if it becomes trashed, or you get lost somewhere in space. Also turns off camera locking to objects with (lock-camera)
@subsection Example
@lisp
 ; ruin the camera transform
 (set-camera-transform (vector 123 41832 28 0.2 128 0.001 123 41832 28 0.2 128 0.001 0.2 100 13 1931)) 
 ; set it back to the starting position/orientation
 (reset-camera) 

@end lisp

