(clear)
(define dirlight1 (vtransform (vector 0 1 0) (mrotate (vector 45 45 0))))
(define dirlight2 (vtransform (vector 0 1 0) (mrotate (vector -70 -45 40))))

(texture (load-texture "textures/gradient.png"))
;(show-axis 1)
(hint-unlit)
;(hint-wire)
;(line-width 2)

(define (toon-light n)
    (let ((lighting (vdot (pdata-get "n" n) dirlight1)))
        (if (< lighting 0) (set! lighting 0.1)) 
        (if (> lighting 0.95) (set! lighting 0.95)) 
        (pdata-set "t" n (vector lighting 0 0)))
    (if (< n 1)
        0
        (toon-light (- n 1))))

(define (deform n a s)
    (pdata-set "p" n (vadd (pdata-get "p" n) 
        (vmul (pdata-get "n" n)
        (* (sin (* (vector-ref (pdata-get "p" n) 1) s)) a))))
    (if (< n 1)
        0
        (deform (- n 1) a s)))

(define (deform-plane n)
    (pdata-set "p" n (vadd (pdata-get "p" n) 
        (vmul (pdata-get "n" n)
        (* (sin (* (vdist (vector 5 0 5) (pdata-get "p" n)) 3)) 0.5))))
    (if (< n 1)
        0
        (deform-plane (- n 1))))

(define (make-spheres n)
    (push)
    (colour (vector (flxrnd)(flxrnd)(flxrnd)))
    (translate (vmul (vector (flxrnd) 0.1 (flxrnd)) 8))
    (let ((s (build-sphere 20 20)))
        (grab s)
        (deform (pdata-size) (flxrnd) (* (flxrnd) 10))
        (recalc-normals)
        (toon-light (pdata-size))
        (ungrab))
    (pop)
    (if (< n 1)
        0
        (make-spheres (- n 1))))

(make-spheres 5)

(push)
(scale (vector 10 10 10))
(colour (vector (flxrnd)(flxrnd)(flxrnd)))
(translate (vector 0 -1 0))
(let ((s (build-seg-plane 20 20)))
    (apply s)
    (grab s)
    (deform-plane (pdata-size))
    (recalc-normals)
    (toon-light (pdata-size))
    (rotate (vector -90 0 0))
    (ungrab))
(pop)
